/*******************************************
  @fileName    : main.js
  @author      : 이병훈
  @date        : 2024. 10. 12
  @description : 거래처 메인 관련 코드
********************************************/

/*******************************************
  처음 화면 데이터 가져오기 함수
********************************************/
function loadSalesData(){
	const period = $('input[name="period"]:checked').val();
	$.ajax({
		url : '/cnpt/main/getSalesData',
		type : 'POST',
		contentType : 'application/json; charset=utf-8',
		data : JSON.stringify({ period : period }),
		beforeSend : function(xhr){
			xhr.setRequestHeader(csrfHeader, csrfToken);
		},
		success : function(data){
			console.log("data 먼저 보자 : ", data);
			console.log("data.totalAmount : ", data.totalAmount);
			
			// 총 매출 금액이 있는 경우 업데이트
		    if (data.totalAmount !== undefined) {
		        console.log("DOM 업데이트 중: ", data.totalAmount);
		        updateTotalAmount(data.totalAmount);  // 이 부분을 다시 점검
		    } else {
		        console.warn("총 매출 금액이 없습니다.");
		        $('#totalAmt').text('0 원');
		    }	
		    
			if (!data.chartData || data.chartData.length === 0) {
			    console.log("차트 데이터가 없습니다.");
			    return;
			}
			
			data.chartData.forEach((item) => {
				console.log("item.period : ", item.period);
			});
			
			// List로 들어오는 chartData이기 때문에 labels와 data를 분리해서 chartData를 전달
			const labels = data.chartData.map(item => item.period);
            const chartValues = data.chartData.map(item => item.clclnAmt);
			
			console.log("여기 체크 period : ", period);
			
			updateChart(data.chartData, period);
		},
		error :function(xhr, status, error){
			console.error("에러 발생 : ", error);
		}
	// ajax 끝	
	});
// loadSalesData 함수 끝
}

/*******************************************
  매출 현황 차트 그리기 함수
********************************************/
function updateChart(data, period){
	const ctx = document.getElementById('myChart').getContext('2d');
	
	// 기존 차트가 있으면 파괴
	if(window.salesChart) {
		window.salesChart.destroy();
	}
	
    // 동적 레이블 생성
    const labels = generateLabels(period, data);
	
	 // 데이터 매핑 로직 (기간에 따른 총액 계산)
    const chartValues = labels.map(label => {
        if (period === 'year') {
            // 월별 매출 계산
            const month = label.replace('월', '').padStart(2, '0'); // '1월' → '01'
            const totalForMonth = data
                .filter(item => item.clclnYmd.startsWith(`2024${month}`))
                .reduce((sum, item) => sum + item.clclnAmt, 0);
            return totalForMonth;

        } else if (period === 'month') {
            // 일별 매출 계산
            const day = label.replace('일', '').padStart(2, '0'); // '4일' → '04'
            const totalForDay = data
                .filter(item => item.clclnYmd.endsWith(day))
                .reduce((sum, item) => sum + item.clclnAmt, 0);
            return totalForDay;

        } else if (period === 'day') {
            // 특정 날짜 매출 계산 (예시로 '시간별' 데이터를 처리)
            const hour = label.replace('시', '').padStart(2, '0'); // '1시' → '01'
            const totalForHour = data
                .filter(item => item.clclnYmd.endsWith(hour))
                .reduce((sum, item) => sum + item.clclnAmt, 0);
            return totalForHour;
        }
    });
	
	// x축 레이블 생성
    const xAxisLabel = period === 'year' 
        ? '월별 매출' 
        : period === 'month' 
        ? '일별 매출' 
        : '시간별 매출';

	
	window.salesChart = new Chart(ctx, {
		type : 'line',
		data : {
			labels : labels,
			datasets : [{
				data : chartValues,
				borderColor : 'rgba(75, 192, 192, 1)'
			}]
		},
		options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false,
                    position: 'top',
                },
                title: {
                    display: true,
                    text: '매출 현황'
                }
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: xAxisLabel
                    },
                     ticks: {
                        autoSkip: false, 
                        maxRotation: 45, 
                        minRotation: 0,
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: '매출 금액 (원)'
                    }
                }
            }
        }
	});
// updateChart 함수 끝	
}

/*******************************************
  검색 조건에 따른 상품 매출 차트함수
********************************************/
function loadProductSalesData(period){
	console.log("검색 기간 : ", period);
	
	$.ajax({
		url : '/cnpt/main/getProductSalesData',
		type : 'GET',
		data : { period:period },
		beforeSend : function(xhr){
			xhr.setRequestHeader(csrfHeader, csrfToken);
		},
		success : function(res){
			console.log("성공 :", res);
			console.log("productData :", res.productSalesData);
			
			
			// 상품별 차트 업데이트
			updateProductChart(res.productSalesData);
			
			// 총 매출 금액 업데이트
			updateTotalAmount(res.total);
		},
		error : function(xhr, status, error){
			console.error("오류 발생 : ", error);
		}
	// ajax 끝	
	});
// loadProductSalesData 함수 끝	
}

/*******************************************
  검색조건에 따른 상품 매출 차트 업데이트 함수
********************************************/
function updateProductChart(productSalesData){
	
	// 데이터가 없을 경우
	if(!productSalesData || productSalesData.length === 0){
		console.log("상품 매출 데이터가 없습니다.");
		return;
	}
	// 라벨과 데이터 추출 = 상품 명 / 총 매출
	const labels = productSalesData.map(item => item.gdsNm || "Unknown");
	const data = productSalesData.map((item) => {
			console.log("item : ", item);
		 return item.total; 
		 });
	
	console.log("labels : ", labels);
	console.log("data : ", data);
	
	// 	기존 차트가 있다면 제거
	if(window.productChart){
		window.productChart.destroy();
	}
	
	// 차트 데이터 설정
	const chartData = {
			labels: labels,
	        datasets: [{
	            label: '상품별 매출',
	            data: data,
	            backgroundColor: [
	                'rgba(255, 99, 132, 0.2)',
	                'rgba(54, 162, 235, 0.2)',
	                'rgba(255, 206, 86, 0.2)',
	                'rgba(75, 192, 192, 0.2)',
	                'rgba(153, 102, 255, 0.2)',
	                'rgba(255, 159, 64, 0.2)'
	            ],
	            borderColor: [
	                'rgba(255, 99, 132, 1)',
	                'rgba(54, 162, 235, 1)',
	                'rgba(255, 206, 86, 1)',
	                'rgba(75, 192, 192, 1)',
	                'rgba(153, 102, 255, 1)',
	                'rgba(255, 159, 64, 1)'
	            ], 
	            borderWidth : 1
		}]
	};	
	
	// 차트 옵션 설정
	const options = {
		 responsive: true,
	        plugins: {
	            legend: {
	                display: true,
	                position: 'top',
	            },
	            title: {
	                display: true,
	            }
	        }	  
	};	
	
	
	// 도넛 차트 생성
    const ctx = document.getElementById('gdsChart').getContext('2d');
    window.productChart = new Chart(ctx, {
        type: 'doughnut',
        data: chartData,
        options: options
    });
	
    
// updateProductChart 함수 끝	
}


/*******************************************
  검색조건에 따른 총 매출액 비동기 업데이트
********************************************/
function updateTotalAmount(totalAmount) {
    console.log("updateTotalAmount 호출됨. 총액:", totalAmount);

    const totalAmtElement = $('#totalAmt');
    if (totalAmtElement.length === 0) {
        console.error("총 매출 금액을 표시할 엘리먼트를 찾을 수 없습니다.");
        return;
    }

    if (typeof totalAmount === 'number' && !isNaN(totalAmount)) {
        totalAmtElement.html(`${totalAmount.toLocaleString()} 원`);
        console.log("DOM 업데이트 완료:", totalAmount);
    } else {
        console.warn("총 매출 금액이 없습니다.");
        totalAmtElement.html('0 원');
    }
}

/*******************************************
  검색되는 period(기간)에 따른 x축 데이터 생성
********************************************/
function generateLabels(period, data) {
    if (period === 'year') {
        return ['1월', '2월', '3월', '4월', '5월', '6월', 
                '7월', '8월', '9월', '10월', '11월', '12월'];
    } else if (period === 'month') {
        const daysInMonth = new Set(
            data.map(item => parseInt(item.clclnYmd.slice(6, 8), 10))
        );
        return Array.from(daysInMonth).sort((a, b) => a - b).map(day => `${day}일`);
    } else {
        return Array.from({ length: 24 }, (_, i) => `${i}시`);
    }
}

/*************************************************************************************
			본사 납품 조회  ------------------------------------------- 공통(본사, 거래처)
**************************************************************************************/
function selectDealAjax(){
 	let bzentNm = $('#bzentNm').val();
 	let clclnYn = $('#clclnYn').val();
	let sregYmdDt = $('#sregYmd').val();
	let eregYmdDt = $('#eregYmd').val();
	let sdeYmdDt = $('#sdeYmd').val();
	let edeYmdDt = $('#edeYmd').val();
	
	let data = {};

	// 값이 빈 문자열이 아니면 data 객체에 추가
	if (bzentNm) {
	    data.bzentNm = bzentNm;
	}
	if (clclnYn) {
	    data.clclnYn = clclnYn;
	}
	if (sregYmdDt) {
	    data.sregYmd = dateToStr(sregYmdDt);
	}
	if (eregYmdDt) {
	    data.eregYmd = dateToStr(eregYmdDt);
	}
	if (sdeYmdDt) {
	    data.sdeYmd = dateToStr(sdeYmdDt);
	}
	if (edeYmdDt) {
	    data.edeYmd = dateToStr(edeYmdDt);
	}
	
	data.deliType = deliType;
	data.sort = sort;
	data.orderby = orderby;
	data.currentPage = currentPage;
	data.bzentNo = bzentNo;
	data.type = type;
	
	//console.log(data);  // 최종적으로 빈 값이 제외된 data 객체
	
	// 서버전송
	$.ajax({
		url : "/com/deal/listAjax",
		type : "GET",
		data : data,
		success : function(res){
			console.log(res);
			// 분류 처리
			$('#tap-all').text(res.all);
			$('#tap-deli01').text(res.deli01);
			$('#tap-deli02').text(res.deli02);
			$('#tap-deli03').text(res.deli03);
			$('#tap-deli04').text(res.deli04);
			
			//console.log(res);
			// 테이블 처리
			let strTbl = '';
			
			if(res.total == 0){ // 검색 결과가 0인 경우
				strTbl+= `
							<tr>
								<td class="error-info" colspan="7"> 
									<span class="icon material-symbols-outlined">error</span>
									<div class="error-msg">검색 결과가 없습니다</div>
								</td>
							</tr>
				`;
				$('.pagination').html('');
			} else {
				res.articlePage.content.forEach(list => {
				// 배송 일자
				let deli = '-';
				if(list.deliYmd!=null){
					deli = strToDate(list.deliYmd);
				}
				
				let clclnAmt = '-'
				if(list.poClclnVO.clclnAmt!=0){
					clclnAmt = list.poClclnVO.clclnAmt.toLocaleString()+'원';
				}
				// 등록 일자
				let reg = strToDate(list.regYmd);
				
				// 정산 여부
				let clclnYn = !list.poClclnVO.clclnYn ? `<span class='bge bge-default-border'>해당없음</span>` : list.poClclnVO.clclnYn=='Y' ? `<span class='bge bge-active-border'>정산완료</span>` : `<span class='bge bge-danger-border'>정산미납</span>`
				
				// 유형
				let deliTypeStr = list.deliType=='DELI01' ? `<span class='bge bge-info'>${list.deliTypeNm}</span>`
					: list.deliType=='DELI02' && isPastOrToday(list.deliYmd) && type=='po' ? `<span class='bge bge-active-border'>배송확정</span>` 
					: list.deliType=='DELI02' ? `<span class='bge bge-warning'>${list.deliTypeNm}</span>` 
					: list.deliType=='DELI03' ? `<span class='bge bge-active'>${list.deliTypeNm}</span>` : `<span class='bge bge-danger'>${list.deliTypeNm}</span>`;
				
				
	    		strTbl += `
				    <tr class="dealDtl" data-no="${list.poNo}">
				        <td class="center">${list.rnum}</td>
				        <td class="center">${list.poNo}</td>`
				        
				if(bzentNo=='HO0001'){
					strTbl +=`<td>${type=='po' ? list.stockPoVOList[0].bzentVO.bzentNm : list.bzentVO.bzentNm}</td>`;
				}
		       strTbl+= `<td class="right">${clclnAmt}</td>
				        <td class="center">${deli}</td>
				        <td class="center">${clclnYn}</td>
				        <td class="center">${deliTypeStr}</td>
				    </tr>
				`;
				
				});
				
				// 페이징 처리
				let page = '';
				
				if (res.articlePage.startPage > res.articlePage.blockSize) {
				    page += `
				        <a href="#page" class="page-link" data-page="${res.articlePage.startPage - res.articlePage.blockSize}">
				            <span class="icon material-symbols-outlined">chevron_left</span>
				        </a>
				    `;
				}
				
				// 페이지 번호 링크들 추가
				for (let pnum = res.articlePage.startPage; pnum <= res.articlePage.endPage; pnum++) {
				    if (res.articlePage.currentPage === pnum) {
				        page += `<a href="#page" class="page-link active" data-page="${pnum}">${pnum}</a>`;
				    } else {
				        page += `<a href="#page" class="page-link" data-page="${pnum}">${pnum}</a>`;
				    }
				}
				
				// 'chevron_right' 아이콘 및 다음 페이지 링크 추가
				if (res.articlePage.endPage < res.articlePage.totalPages) {
				    page += `
				        <a href="#page" class="page-link" data-page="${res.articlePage.startPage + res.articlePage.blockSize}">
				            <span class="icon material-symbols-outlined">chevron_right</span>
				        </a>
				    `;
				}
				$('.pagination').html(page);
				}
			$('#table-body').html(strTbl)
			}
		});			
 }
 



