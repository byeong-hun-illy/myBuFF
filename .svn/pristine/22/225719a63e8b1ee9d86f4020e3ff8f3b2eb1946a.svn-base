package com.buff.cust.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.buff.cust.mapper.CustCenterMapper;
import com.buff.cust.mapper.MemberMapper;
import com.buff.cust.service.CustCenterService;
import com.buff.cust.service.CustHomeService;
import com.buff.cust.service.CustMyPageService;
import com.buff.util.UploadController;
import com.buff.vo.BzentVO;
import com.buff.vo.CouponVO;
import com.buff.vo.EventVO;
import com.buff.vo.FrcsDscsnVO;
import com.buff.vo.MenuVO;
import com.buff.vo.OrdrVO;
import com.buff.vo.QsVO;

import lombok.extern.slf4j.Slf4j;

@PreAuthorize("hasRole('ROLE_CUST')")
@Slf4j
@RequestMapping("/cust")
@Controller
public class CustMemberController {
	
	@Autowired
	CustCenterService centerService;
	
	@Autowired
	CustMyPageService myPageService;
	
	@Autowired
	CustCenterMapper centerMapper;
	
	@Autowired
	CustHomeService HomeServcie;
	
	@Autowired
	MemberMapper memberMapper;
	
	@Autowired
	UploadController uploadController;
	
	/**
	 * @methodName  : selectMenu
	 * @author      : 서윤정
	 * @date        : 2024.09.12
	 * @param :  
	 * @return 
	 */

	@GetMapping("/selectMenu")
	public String selectMenu() {
		
		return "cust/main/selectMenu";
	}
	
	/**
	 * @methodName  : selectStore
	 * @author      : 서윤정
	 * @date        : 2024.09.12
	 * @param : BzentVO
	 * @return 문의사항 화면
	 */
	
	@PostMapping("/insertQsPostAjax")
	@ResponseBody
	public int insertQsPostAjax(@ModelAttribute QsVO qsVO
			, 	@RequestParam(value="uploadFile", required = false, defaultValue = "") MultipartFile[] uploadFile
			) {
		log.info("insertQsPostAjax->qsVO : " + qsVO);
		
		int result = this.centerService.insertQsPost(qsVO);

		return result;
	}
	

	@PostMapping("/insertDscsnPost")
	@ResponseBody
	public int insertDscsnPost( @RequestBody FrcsDscsnVO frcsDscsnVO,  Principal principal) {

		log.info("insertDscsnPost->frcsDscsnVO : " + frcsDscsnVO);
		
		String mbrId = principal.getName();
		log.info("insertDscsnPost -> : " + mbrId);
		
		int cnt = HomeServcie.checkId(mbrId);
		log.info("cnt : " + cnt);
		
		int result = 0;		
		
		if(cnt<1) {
		    try {
		        result = HomeServcie.insertDscsnPost(frcsDscsnVO);
		        return result; 
		    } catch (Exception e) {
		        return 0; 
		    }
		}else {
			return 3;
		}
	}
	
	
	
	@GetMapping("/insertOrdr")
	public String insertOrdr(@RequestParam Map<String, Object> map, Model model) {

		List<BzentVO> bzentVOList = HomeServcie.selectOrdrStore(map);
		
		int total = HomeServcie.getTotal(map);
		log.info("selectStore -> total :" + total);
		 
		model.addAttribute("bzentVOList", bzentVOList);
		model.addAttribute("total", total);

		return "cust/main/insertOrdr";
	}
	
	
  @ResponseBody
  @PostMapping("/selectFrcsAjax") 
  public Map<String,Object> selectFrcsAjax(
		  @RequestParam(value="rgnNo",required=false,defaultValue="") String rgnNo, 
		  @RequestParam(value="keyword",required=false,defaultValue="") String keyword,
		  Model model) {
	  //selectRgnAjax->rgnNo : RGN11
	  log.info("selectRgnAjax->rgnNo : " + rgnNo);
	  //selectRgnAjax->keyword : 역삼
	  log.info("selectRgnAjax->keyword : " + keyword);
	  
	  Map<String,Object> map = new HashMap<String, Object>();
	  map.put("rgnNo", rgnNo);
	  map.put("keyword", keyword);
	  
	  List<BzentVO> bzentVOList = HomeServcie.selectOrdrStore(map);
	  
	  int total = HomeServcie.getTotal(map); 
	  log.info("selectStore -> total :" + total);
	  
	  map.put("bzentVOList", bzentVOList); 
	  map.put("total",total);
	  
	  return map; 
  }
 
	
  /**
	* @methodName  : selectStore
	* @author      : 서윤정
	* @date        : 2024.09.12
	* @param : BzentVO
	* @return 본사 메뉴 조회
	*/
  @PostMapping("/selectOrdrMenuAjax")
  @ResponseBody
  public Map<String, Object> selectOrdrMenuAjax(
          @RequestParam(value = "bzentNo", required = false, defaultValue = "") String bzentNo,
          @RequestParam(value = "menuGubun", required = false, defaultValue = "") String menuGubun) {

      log.info("menuGubun : " + menuGubun);
      log.info("bzentNo : " + bzentNo);

      
      Map<String, Object> map = new HashMap<>();
      map.put("menuGubun", menuGubun);
      map.put("bzentNo", bzentNo);

      // 메뉴 목록 조회
      List<MenuVO> menuVOList = this.HomeServcie.selectOrdrMenu(map);
      log.info("selectOrdrMenuAjax -> menuVOList : " + menuVOList);

      // 응답 데이터에 메뉴 목록 추가
      map.put("menuVOList", menuVOList);

      return map;
  }

  /*
   selectEvent.jsp의 이벤트를 선택 시 이벤트 상세(insertEventCoupon.jsp)로 이동
   
   /cust/insertEventCoupon?eventNo=E00001
   */
  @GetMapping("/insertEventCoupon")
  public String insertEventCoupon(@RequestParam(value="eventNo") String eventNo, Model model) {
      log.info("insertEventCoupon -> eventNo: {}", eventNo);
      
      EventVO eventVO = HomeServcie.insertEventCoupon(eventNo);
      log.info("insertEventCoupon -> eventVO: {}", eventVO);
      
      model.addAttribute("eventVO", eventVO);
      
      return "cust/main/insertEventCoupon";
  }

  
  
  
  /**
	* @methodName  : insertEventCoupon
	* @author      : 서윤정
	* @date        : 2024.10.01
	* @param : mbrId
	* @return 이벤트 - 쿠폰 발급 (중복체크)
	*/
  @PostMapping("/insertEventCoupon")
  @ResponseBody
  public String insertEventCouponPost( CouponVO couponVO,Model model) {
	  
	  log.info("insertEventCouponPost->couponVO : " + couponVO);
	  
	  String mbrId = couponVO.getMbrId();
	  String couponCode = couponVO.getCouponCode();
	  log.info("insertEventCouponPost->mbrId : " + mbrId + ", couponCode : " + couponCode);
	  
	  
	  
	  Map<String,Object> map = new HashMap<String, Object>();
	  map.put("mbrId", mbrId);
	  map.put("couponCode", couponCode);
	  log.info("insertEvent->map : " + map);
	  
	  // 쿠폰이 있는지 체크 
	  int cnt = HomeServcie.chkCoupon(map);
	  log.info("insertEventCouponPost -> cnt : " + cnt);
	  
	  
	  EventVO eventVO = HomeServcie.insertEventCoupon(couponVO.getEventNo());
	  
	  model.addAttribute("eventVO", eventVO);
	  
	  int result = 0;
	  
	  // 쿠폰 있으면 Y, 없으면 N
	  if(cnt>0) {
		  model.addAttribute("isDuplicate","Y");
		    return "cust/main/insertEventCoupon";
	  }else {
		  	result = HomeServcie.insertEventCouponPost(map);
		  	log.info("insertEventCouponPost -> result : " + result);
			model.addAttribute("isDuplicate","N");
			
			return "cust/main/insertEventCoupon";
	  }
	  
  }
  
  
  /**
	* @methodName  : insertEventCoupon
	* @author      : 서윤정
	* @date        : 2024.10.01
	* @param : mbrId
	* @return 관심 매장 등록
	*/
  @PostMapping("/selectStoreAjax")
  @ResponseBody
  public Map<String, Object> selectStoreAjax(@RequestParam(value="bzentNo") String bzentNo, Principal principal) {
      String mbrId = principal.getName();
      Map<String, Object> response = new HashMap<>();
      
      Map<String,Object> map = new HashMap<>();
      map.put("mbrId", mbrId);
      map.put("bzentNo", bzentNo);
      log.info("selectStoreAjax -> bzentNo : " + bzentNo);
      
      
      int cnt = HomeServcie.chkLikeStore(map);
      int result =0;
      
      log.info("selectStoreAjax -> cnt : " + cnt);
      
      if (cnt > 0) {
    	  result = HomeServcie.deleteLikeStore(map);
    	  log.info("deleteLikeStore -> result : " + result);
          response.put("isDuplicate", "N");
      } else {
          result = HomeServcie.insertLikeStore(map);
          log.info("insertLikeStore -> result : " + result);
          response.put("isDuplicate", "Y");
      }
      
      return response; 
  }

  
  @GetMapping("/selectMyPage")
	public String selectMyPage(Principal principal, Model model) {
		
		
		String mbrId = principal.getName();
		log.info("myPageMain -> mbrId :" + mbrId);
		
		//3. 문의 내역
		List<QsVO> qsVOList = myPageService.myQs(mbrId);
		log.info("myPageMain -> qsVOList : " + qsVOList);
		
		//4. 가맹 상담
		List<FrcsDscsnVO> frcsDscsnVOList = myPageService.myDscsn(mbrId);
		log.info("myPageMain -> frcsDscsnVOList : " + frcsDscsnVOList);
		
		
		List<OrdrVO> ordrVOList = myPageService.myOrdr(mbrId);
		log.info("myPageMain -> OrdrVOList : " + ordrVOList);
		
		//1. 쿠폰
		List<EventVO> eventVOList = myPageService.myCoupon(mbrId);
		log.info("myPageMain -> eventVOList : " + eventVOList);
		
		
		
		model.addAttribute("qsVOList",qsVOList);
		model.addAttribute("frcsDscsnVOList",frcsDscsnVOList);
		model.addAttribute("ordrVOList",ordrVOList);
		model.addAttribute("eventVOList",eventVOList);
		
		return "cust/custPage/selectMyPage";
	}
  
    @ResponseBody
	@PostMapping("/couponListAjax")
	public List<EventVO> couponListAjax(Principal principal){
		
		String mbrId = principal.getName();
		log.info("couponListAjax -> mbrId :" + mbrId);
		
		//1. 쿠폰
		List<EventVO> eventVOList = myPageService.myCoupon(mbrId);
		log.info("couponListAjax -> eventVOList : " + eventVOList);
		
		return eventVOList;
	}
  
  
}







