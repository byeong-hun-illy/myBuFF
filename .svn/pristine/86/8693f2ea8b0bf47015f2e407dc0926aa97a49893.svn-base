package com.buff.hdofc.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.buff.hdofc.service.HdofcGdsService;
import com.buff.util.ArticlePage;
import com.buff.vo.BzentVO;
import com.buff.vo.FrcsVO;
import com.buff.vo.GdsAmtVO;
import com.buff.vo.GdsVO;
import com.buff.vo.StockVO;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;

/**
* @packageName  : com.buff.hdofc.controller
* @fileName     : HdofcGdsController.java
* @author       : 송예진
* @date         : 2024.09.25
* @description  : 본사 재고관리, 상품 관리
* ===========================================================
* DATE              AUTHOR             NOTE
* -----------------------------------------------------------
* 2024.09.25        송예진     	  			최초 생성
*/
@Controller
@RequestMapping("/hdofc/gds")
@PreAuthorize("hasRole('ROLE_HDOFC')")
@Slf4j
public class HdofcGdsController {
	
	@Autowired
	HdofcGdsService gdsService;
	
	/**
	* @methodName  : selectStock
	* @author      : 송예진
	* @date        : 2024.09.25
	* @param model
	* @return      : 페이지 이동
	*/
	@GetMapping("/list")
	public String selectStock(Model model) {
		return "hdofc/gds/selectStock";
	}
	
	/**
	* @methodName  : selectStockAjax
	* @author      : 송예진
	* @date        : 2024.09.25
	* @param map
	* @return      : 리스트 Ajax
	*/
	@ResponseBody
	@GetMapping("/listAjax")
	public Map<String, Object> selectStockAjax(@RequestParam Map<String, Object> map){
		int size = 10;
		if(map.containsKey("size")) {
			size = Integer.parseInt((String) map.get("size"));
		} else {
			map.put("size", size);
		}
	    List<GdsVO> gdslist = this.gdsService.selectStock(map);
	    Map<String, Object> response = this.gdsService.selectTotalStock(map);
	    int total = (int) response.get("total");
	    int currentPage = Integer.parseInt((String) map.get("currentPage"));
	    
	    // 분류 숫자 계산
	    // 응답 데이터를 담을 Map 생성
	    response.put("articlePage", new ArticlePage<GdsVO>(total, currentPage, size, gdslist, map));
	    
	    return response; // 여러 데이터를 포함한 Map 반환
	}
	
	/**
	* @methodName  : insertGds
	* @author      : 송예진
	* @date        : 2024.09.25
	* @return      : 상품 추가로 이동
	*/
	@GetMapping("/regist")
	public String insertGds() {
		return "hdofc/gds/selectStockDtl";
	}
	
	/**
	* @methodName  : insertGdsAjax
	* @author      : 송예진
	* @date        : 2024.09.25
	* @return      : 상품 추가/단가추가
	*/
	@PostMapping("/registAjax")
	@ResponseBody
	public String insertGdsAjax(@RequestBody Map<String, Object> map) {
		ObjectMapper objectMapper = new ObjectMapper();
		int cnt = 0;
		
		
		// Map 데이터를 VO로 변환
	    GdsVO gdsVO = objectMapper.convertValue(map.get("gdsVO"), GdsVO.class);
	    GdsAmtVO gdsAmtVO = objectMapper.convertValue(map.get("gdsAmtVO"), GdsAmtVO.class);
	    
	    cnt += this.gdsService.insertGds(gdsVO);
	    String gdsCode = gdsVO.getGdsCode();
		if(gdsAmtVO.getAmt()!=0) {
			gdsAmtVO.setGdsCode(gdsCode);
			this.gdsService.insertStock(gdsAmtVO);
			this.gdsService.insertGdsAmt(gdsAmtVO);
		}
	    
	    return gdsCode;
	}
	
	////////////////////////// 상세
	/**
	* @methodName  : selectStockDtl
	* @author      : 송예진
	* @date        : 2024.09.25
	* @param model
	* @param gdsCode
	* @return 상세페이지로 이동
	*/
	@GetMapping("/dtl")
	public String selectStockDtl(Model model, @RequestParam String gdsCode) {
		return "hdofc/gds/selectStockDtl";
	}
	
	/**
	* @methodName  : selectGdsDtlAjax
	* @author      : 송예진
	* @date        : 2024.09.25
	* @param stockVO
	* @return 상세 내용 출력
	*/
	@PostMapping("/dtlAjax")
	@ResponseBody
	public Map<String, Object> selectGdsDtlAjax(@RequestBody StockVO stockVO){
		Map<String, Object> map = new HashMap<String, Object>();
		GdsVO gdsVO = this.gdsService.selectStockDtl(stockVO);
		map.put("gds", gdsVO);
		int chk = this.gdsService.selectUpdateChk(stockVO);
		map.put("chk", chk);
		return map;
	}
	
	/**
	* @methodName  : deleteGdsAjax
	* @author      : 송예진
	* @date        : 2024.09.25
	* @param gdsCode
	* @return 재고가 없을때 삭제
	*/
	@PostMapping("/deleteAjax")
	@ResponseBody
	public int deleteGdsAjax(@RequestParam String gdsCode) {
		return this.gdsService.deleteGds(gdsCode);
	}
	
	/**
	* @methodName  : updateGdsAjax
	* @author      : 송예진
	* @date        : 2024.09.25
	* @param gdsVO
	* @return 재고가 없을 때 수정
	*/
	@PostMapping("/updateAjax")
	@ResponseBody
	public int updateGdsAjax(@RequestBody GdsVO gdsVO) {
		return this.gdsService.updateGds(gdsVO);
	}
	
	@PostMapping("/updateAmtAjax")
	@ResponseBody
	public int updateAmtAjax(@RequestBody Map<String, Object> map) {
		ObjectMapper objectMapper = new ObjectMapper();
		// Map 데이터를 VO로 변환
	    StockVO stockVO = objectMapper.convertValue(map.get("stockVO"), StockVO.class);
	    GdsAmtVO gdsAmtVO = objectMapper.convertValue(map.get("gdsAmtVO"), GdsAmtVO.class);
	    
	    int cnt = this.gdsService.selectUpdateChk(stockVO);
	    if(cnt==0) {
	    	this.gdsService.insertStock(gdsAmtVO);
	    }
	    if(gdsAmtVO.getAmt()!=0) {
	    	// gdsAmtVO(bzentNo, gdsCode, amt)
			this.gdsService.insertGdsAmt(gdsAmtVO);
		}
	    // bzentNo, gdsCode, sfStockQty
		return this.gdsService.updateSfStock(stockVO);
	}
}
