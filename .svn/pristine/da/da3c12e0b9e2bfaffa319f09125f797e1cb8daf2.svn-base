package com.buff.cnpt.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.buff.cnpt.service.CnptGdsService;
import com.buff.cnpt.service.CnptStockService;
import com.buff.com.service.ComService;
import com.buff.cust.mapper.MemberMapper;
import com.buff.vo.GdsVO;
import com.buff.vo.MemberVO;

import lombok.extern.slf4j.Slf4j;

/**
* @packageName  : com.buff.cnpt.controller
* @fileName     : CnptStockController.java
* @author       : 이병훈
* @date         : 2024.10.01
* @description  : 거래처 재고관련 컨트롤러
* ===========================================================
* DATE              AUTHOR             NOTE
* -----------------------------------------------------------
* 2024.10.01        이병훈     	  			최초 생성
*/
//@PreAuthorize("hasRole('ROLE_CNPT')")
@Slf4j
@Controller
@RequestMapping("/cnpt")
public class CnptStockController {

	@Autowired
	ComService comService;
	
	@Autowired
	CnptGdsService cnptGdsService;
	
	@Autowired
	CnptStockService cnptStockService;
	
	@Autowired
	MemberMapper memberMapper;
	
	
	/**
	* @methodName  : insertStockQty
	* @author      : 이병훈
	* @date        : 2024.10.01
	* @param gdsCode
	* @param model
	* @return  	   : 재고 추가 페이지로 이동
	*/
	@GetMapping("/stock/insertStockQty")
	public String insertStockQty(@RequestParam(required = false) String gdsCode,
								Model model) {
		model.addAttribute("gdsCode", gdsCode);
		return "cnpt/gds/insertStockQty";
	}
	
	
	/**
	* @methodName  : insertStockQtyAjax
	* @author      : 이병훈
	* @date        : 2024.10.01
	* @param map
	* @return      : 재고 추가 페이지 출력
	*/
	@PostMapping("/stock/insertStockQtyAjax")
	@ResponseBody
	public int insertStockQtyAjax(@RequestBody Map<String, Object> map) {
		 log.info("Received gdsCode: " + map.get("gdsCode"));
		 log.info("Received stockVO: " + map.get("stockVO"));
		 log.info("Received stockAjmtVO: " + map.get("stockAjmtVO"));
		
		int result = this.cnptStockService.insertStockQty(map);
		
		return result;
			 
	}
	
	/**
	* @methodName  : selectGdsList
	* @author      : 이병훈
	* @date        : 2024.10.01
	* @param bzentNo
	* @return      : 해당 거래처의 보유 상품 리스트
	*/
	@GetMapping("/stock/selectGdsList")
	@ResponseBody
	public List<GdsVO> selectGdsList(@RequestParam String bzentNo){
		log.info("selectGdsList 컨트롤러에 들어옴");
		return this.cnptStockService.selectGdsList(bzentNo);
	}
	
	
	/**
	* @methodName  : downloadTemp
	* @author      : 이병훈
	* @date        : 2024.10.02
	* @param response
	* @param bzentNo
	* @description : 재고 양식 엑셀 파일 다운로드
	*/
	@GetMapping("/stock/downloadTemp")
	public void downloadTemp(HttpServletResponse response,
						     @RequestParam String bzentNo) {
		try {
			this.cnptStockService.downloadTemp(response, bzentNo);
		} catch (Exception e) {
			log.error("TempExcel download error : ", e);
			// 이미 전송된 응답이 있으면 초기화
			response.reset();
			response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
		
	}
	
	
	/**
	* @methodName  : uploadNewStock
	* @author      : 이병훈
	* @date        : 2024.10.02
	* @param bzentNo
	* @param file
	* @return      : 엑셀 파일 업로드 처리
	*/
	@PostMapping("/stock/uploadNewStock")
	@ResponseBody
	public Map<String, Object> uploadNewStock(@RequestParam MultipartFile file,
											  Principal principal) {
		String mbrId = principal.getName();
		
		MemberVO memberVO = this.memberMapper.getLogin(mbrId);
		
		String bzentNo = memberVO.getBzentNo();
		
		// 로그 추가
	    log.info("업로드 요청 received - bzentNo: {}, file: {}", bzentNo, file.getOriginalFilename());
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		// 엑셀 파일 처리 및 데이터 저장
		boolean isSuccess = this.cnptStockService.uploadNewStock(bzentNo, file);
		
		if(isSuccess) {
			result.put("status", "success");
			result.put("msg", "재고 등록이 성공적으로 완료되었습니다.");
		} else {
			result.put("status", "error");
			result.put("msg", "재고 등록 중 오류가 발생했습니다.");
			// 실패 시 로그 추가
			log.error("업로드 실패 : 파일 처리 중 오류 발생");
			
		}
		return result;
	}
	
	/**
	* @methodName  : insertNewStock
	* @author      : 이병훈
	* @date        : 2024.10.02
	* @param model
	* @param principal
	* @return      : 신규 거래처일 경우, 신규 기초재고 입고 페이지
	*/
	@GetMapping("/stock/insertNewStock")
	public String insertNewStock(Model model, Principal principal) {
		String mbrId = principal.getName();
		model.addAttribute("mbrId", mbrId);
		// 해당 JSP로 이동
		return "cnpt/gds/insertNewStock";
		
	}
	
	
	
	
}
